#!/usr/bin/env python3
"""
Test script for strict title matching and year extraction.
"""

import asyncio
import logging
from search_engine import search_movie, extract_year_from_title, is_exact_title_match

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_strict_search():
    """Test the strict search functionality."""
    
    # Test queries
    test_queries = [
        "–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤",
        "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä",
        "–ú–∞—Ç—Ä–∏—Ü–∞",
        "–¢–∏—Ç–∞–Ω–∏–∫",
        "–ê–≤–∞—Ç–∞—Ä"
    ]
    
    print("üß™ Testing Strict Search with Year Extraction")
    print("=" * 50)
    
    for query in test_queries:
        print(f"\nüîç Searching for: '{query}'")
        print("-" * 30)
        
        try:
            results = await search_movie(query)
            
            if not results:
                print("‚ùå No exact matches found")
            else:
                print(f"‚úÖ Found {len(results)} exact matches:")
                for idx, result in enumerate(results, 1):
                    title_with_year = result['title']
                    if result.get('year'):
                        title_with_year += f" ({result['year']})"
                    
                    print(f"  {idx}. {title_with_year}")
                    print(f"     üì∫ Site: {result['site']}")
                    print(f"     üîó URL: {result['url']}")
                    if result.get('original_title') and result['original_title'] != result['title']:
                        print(f"     üìù Original: {result['original_title']}")
                    print()
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")

def test_year_extraction():
    """Test year extraction function."""
    print("\nüß™ Testing Year Extraction")
    print("=" * 30)
    
    test_titles = [
        "–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ (2023)",
        "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä [2014]",
        "–ú–∞—Ç—Ä–∏—Ü–∞ 1999",
        "–¢–∏—Ç–∞–Ω–∏–∫ (1997)",
        "–ê–≤–∞—Ç–∞—Ä 2009",
        "–§–∏–ª—å–º –±–µ–∑ –≥–æ–¥–∞",
        "–î—Ä—É–≥–æ–π —Ñ–∏–ª—å–º (2020) —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º",
        "–§–∏–ª—å–º [2021] –≤ –∫–æ–Ω—Ü–µ",
        "2022 –§–∏–ª—å–º –≤ –Ω–∞—á–∞–ª–µ"
    ]
    
    for title in test_titles:
        clean_title, year = extract_year_from_title(title)
        print(f"Original: '{title}'")
        print(f"Clean: '{clean_title}' | Year: '{year}'")
        print("-" * 40)

def test_exact_matching():
    """Test exact title matching function."""
    print("\nüß™ Testing Exact Title Matching")
    print("=" * 35)
    
    test_cases = [
        ("–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤", "–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤ (2023)", True),
        ("–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤", "–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤", True),
        ("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä [2014]", True),
        ("–ú–∞—Ç—Ä–∏—Ü–∞", "–ú–∞—Ç—Ä–∏—Ü–∞ 1999", True),
        ("–¢–∏—Ç–∞–Ω–∏–∫", "–¢–∏—Ç–∞–Ω–∏–∫ (1997)", True),
        ("–ì–ª–∞–≤—ã –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤", "–î—Ä—É–≥–æ–π —Ñ–∏–ª—å–º", False),
        ("–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä 2", True),  # Partial match
        ("–ú–∞—Ç—Ä–∏—Ü–∞", "–ú–∞—Ç—Ä–∏—Ü–∞: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞", True),  # Partial match
    ]
    
    for query, title, expected in test_cases:
        result = is_exact_title_match(query, title)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} Query: '{query}' | Title: '{title}' | Expected: {expected} | Got: {result}")

async def main():
    """Run all tests."""
    print("üöÄ Starting Strict Search Tests")
    print("=" * 50)
    
    # Test year extraction
    test_year_extraction()
    
    # Test exact matching
    test_exact_matching()
    
    # Test actual search
    await test_strict_search()
    
    print("\n‚úÖ All tests completed!")

if __name__ == "__main__":
    asyncio.run(main()) 